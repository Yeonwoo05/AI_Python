# 덧셈
2 + 3
# 곱셈
3 * 4
# 제곱
2 ** 3
# 일반적인 나눗셈
13 / 2
# 나눗셈의 몫을 정수로 반환
13 // 6
# 나머지 출력
11 % 3



# 복소수 표현
# 보통 수학에서는 3 + 4i 와 같이
# 복소수를 i 로 표현하는데
# 파이썬에서는 j 를 사용하여 
# 표현한다

1.2 + 3.4j

(1.2 + 3.4j) * 2



# 데이터 타입
# 정수 int
# 소수 float
# 복소수 complex
# 문자열 str

# type() 함수를 이용하여 데이터 타입을 
# 알아볼 수 있다




# 변수
# = : 대입 연산자
# 이름은 자유롭지만, 첫자는 알파벳이나
# 한글, 또는 _ 로 만 해줘야 한다.
#  # : 주석으로, 설명할 때 사용

# 리스트 list
a = [1,2,3,4]
len(a)

# 인덱스를 통해 값에 접근 가능
a[0]

a[3]

# 음수인 인덱스는 뒤에서 부터 시작
a[-1]

# 리스트의 장점
# 저장할 수 있는 데이터 타입과 깊이에 
# 제약이 없다는 것


# 슬라이스
# [시작 요소번호 : 끝 요소번호]
# 단, 이때 콜론 이전에 지정된 요소는 포함되지만
# 콘론 다음에 지정된 요소는 포함 되지 않으므로
# ~이상 ~미만으로 알아두면 좋다

# 첫 요소번호나 끝요소 번호가 없는 경우도 있는데
# 이러한 경우 리스트의 첫요소번호 이후 전부 출력, 또는
# 리스트의 첫 요소부터 끝요소번호까지 출력

# 튜플 tuple
# (1,2,3,4,5)
# 리스트느 수정과 삭제가 가능하지만
# 튜플은 수정과 삭제가 불가능하다
# 요소를 다루는 점에서 차이가 난다

# 튜플은 데이터가 바뀌지 않기에 리스트보다
# 처리속도가 약간 빠르다




# 조건문과 반복문
# 코드 실행의 순서를 조정 가능
# if 조건이 참이라면 :
    # 코드
# else :
    # 코드

# for 변수 in 조건 :
    # 코드
for i in range(3) : 
    print(i)

for i, e in enumerate([5,3,7]) : 
    print(i,":",e)